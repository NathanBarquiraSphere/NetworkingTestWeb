// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PhaseResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PhaseResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPhaseResponse(bb:flatbuffers.ByteBuffer, obj?:PhaseResponse):PhaseResponse {
  return (obj || new PhaseResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPhaseResponse(bb:flatbuffers.ByteBuffer, obj?:PhaseResponse):PhaseResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PhaseResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

phaseId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startPhaseResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPhaseId(builder:flatbuffers.Builder, phaseId:number) {
  builder.addFieldInt8(0, phaseId, 0);
}

static endPhaseResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPhaseResponse(builder:flatbuffers.Builder, phaseId:number):flatbuffers.Offset {
  PhaseResponse.startPhaseResponse(builder);
  PhaseResponse.addPhaseId(builder, phaseId);
  return PhaseResponse.endPhaseResponse(builder);
}
}
