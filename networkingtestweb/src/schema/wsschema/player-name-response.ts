// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PlayerNameResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerNameResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerNameResponse(bb:flatbuffers.ByteBuffer, obj?:PlayerNameResponse):PlayerNameResponse {
  return (obj || new PlayerNameResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerNameResponse(bb:flatbuffers.ByteBuffer, obj?:PlayerNameResponse):PlayerNameResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerNameResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sessionId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPlayerNameResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSessionId(builder:flatbuffers.Builder, sessionId:number) {
  builder.addFieldInt32(0, sessionId, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static endPlayerNameResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerNameResponse(builder:flatbuffers.Builder, sessionId:number, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerNameResponse.startPlayerNameResponse(builder);
  PlayerNameResponse.addSessionId(builder, sessionId);
  PlayerNameResponse.addName(builder, nameOffset);
  return PlayerNameResponse.endPlayerNameResponse(builder);
}
}
